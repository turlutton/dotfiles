" UR http://vim.wikia.com/wiki/ExampleL:_vimrc
" Authors: http://vim.wikia.com/wiki/Vim_on_Freenode
" Description: A minimal, but feature rich, example .vimrc. If you are a
"              newbie, basing your first .vimrc on this file is a good choice.
"              If you're a more advanced user, building your own .vimrc based
"              on this file is still a good idea.

"------------------------------------------------------------

" (i.e. pathogen) Manage your 'runtimepath' with ease.  In practical terms, pathogen.vim makes it super easy to install plugins and runtime files in their own private directories.
" load pathogen from the submodule .vim/bundle/vim-pathogen/ 
runtime bundle/vim-pathogen/autoload/pathogen.vim
" infect plugins
execute pathogen#infect()

"------------------------------------------------------------
" Features {{{1
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
syntax on


"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window as mentioned above, and/or either of the following options:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
" Search incremently (search while typing)
set incsearch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline


"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Syntax of the status line
" set statusline=%f%m%r%h%w\ %<[FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ \ \ \ \ %=%l\/%LL\,%vC\ \ \ \ %p%%\ 

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
" set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" 2 lines above/below cursor when scrolling
set scrolloff=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
"set pastetoggle=<F11>

"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2
"set tabstop=2


"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Include the space after the word with cw
nnoremap cw dwi

"------------------------------------------------------------
"Pour utiliser la m√©thode de repliage bas√©e sur l‚Äôindentation du fichier
"(pratique en python), il suffit de taper la commande :set foldmethod=indent.
"Cela va automatiquement cr√©er les replis √† chaque niveau d‚Äôindentation, en
"supposant que le fichier est correctement indent√©. J‚Äôai une petite pr√©f√©rence
"pour :set foldmethod=syntax car les replis sont cr√©√©s √† partir de la syntaxe
"du fichier (un if, un while, un commentaire‚Ä¶), donc m√™me si votre fichier est
"mal indent√©, les replis seront quand m√™me cr√©√©s correctement. Vraiment tr√®s
"pratique !

" set foldmethod=indent
" au FileType text setlocal foldmethod=manual
set foldmethod=manual
au FileType c,cpp,java,python,cuda setlocal foldmethod=indent

"------------------------------------------------------------

" Solarized theme color
syntax enable
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="normal"
let g:solarized_visibility="high"
colorscheme solarized

"------------------------------------------------------------
"http://vim.wikia.com/wiki/Working_with_Unicode
"
"encoding sets how vim shall represent characters internally. Utf-8 is
"necessary for most flavors of Unicode."

"fileencoding sets the encoding for a particular file (local to buffer);
":setglobal sets the default value. An empty value can also be used: it
"defaults to same as 'encoding'. Or you may want to set one of the ucs
"encodings, It might make the same disk file bigger or smaller depending on
"your particular mix of characters. 

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" I have discovered that if I hold down the Alt key while I use the up / down arrows to navigate the lines in the file, then Vim should follow the lines as shown visually in Vim, and not as the actual lines in the file. The key mappings to make this work are as follows and should simply be added to your vimrc file:
"map <A-DOWN> gj
"map <A-UP> gk
imap <A-UP> <ESC>gki
imap <A-DOWN> <ESC>gji


" Pour que les fen√™tres de diffsplit / diffpatch soient en vertical par d√©faut
set diffopt=vertical

"------------------------------------------------------------
"Active la correction orthographique
set spell
" D√©finit les langues pour v√©rifier l'orthographe
set spelllang=en,fr

"------------------------------------------------------------
" Pour acc√©l√©rer le mise √† jour, notamment de taglist
set updatetime=1000

" Ferme vim si la fen√™tre de TagList est la seule encore ouverte
let Tlist_Exit_OnlyWindow = 1

"------------------------------------------------------------
"" CONFIGURATION POUR AIRLINE ""

" automatically populate the g:airline_symbols dictionary with the powerline symbols
let g:airline_powerline_fonts = 1

"airline fonts
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.whitespace = 'Œû'

" Automatically displays all buffers when there's only one tab open.
 let g:airline#extensions#tabline#enabled = 1

" straight tabs
 " let g:airline#extensions#tabline#left_sep = ' '
 " let g:airline#extensions#tabline#left_alt_sep = '|'

let g:airline#extensions#tmuxline#enabled = 0

"------------------------------------------------------------
" to pass ctrl+arrow keys to through to its terminals (in combination with
" .tmux.conf)
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

"------------------------------------------------------------
" config pour plugin vim-indent-guide
let g:indent_guides_color_change_percent=5
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

"------------------------------------------------------------
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

