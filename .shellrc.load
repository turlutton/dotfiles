# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

## Setting up the environment (should be in .bash_profile if it was not to use with `dfm`)
#
# path to local bin easily handled by the dotfile manager (dfm)
export PATH=$PATH:$HOME/bin
# set the editor variable environnement
export EDITOR=/usr/bin/vim


## Basic bash set up
#
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

## Bash history ##
# supprime les doublons de l'historique qu'ils se suivent ou non
HISTCONTROL=erasedups
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

## Shell options ##
# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar
#permet de cd dans un répertoire mal écris
shopt -s cdspell
#permet de cd dans un répertoire directement en tapant son nom (sans cd)
#shopt -s autocd

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

## Prompt ## 
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
# personnalisation du prompt
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    #pour avoir un fond sur PS1
    #PS1='${debian_chroot:+($debian_chroot)}\e[40m\[\033[01;32m\]\u@\h\[\033[01;37m\]:\[\033[01;34m\]\w\[\033[01;37m\]\$\e[m '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt
# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Bindings for "previous search wich begins with" with arrow up/down
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

# to enable reverse search ctrl+s in combination with ctrl+r (by default ctrl+s pause the screen and so bash never saw ctrl+s to reverse)
# /!\ C-r uses ggvGC fzf_browser
stty -ixon


## Alias definitions.
#
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

#################
## FANCY STUFF ##
#################

## Solarized fancy stuff ##
#
# Enable the use of degraded 256 colorscheme (for vim to use the solarized theme)
# workaround for handling TERM variable in multiple tmux sessions properly from http://sourceforge.net/p/tmux/mailman/message/32751663/ by Nicholas Marriott
if [[ $TERM == xterm ]]; then TERM=xterm-256color; fi
# promptline like airline
[ -f ~/.shell_prompt.sh ] && source ~/.shell_prompt.sh

## Efficiently browsing ##
#
## Fasd - Command-line productivity booster, offers quick access to files and directories, inspired by autojump, z and v - https://github.com/clvv/fasd
#To get fasd working in a shell, some initialization code must be run. 
#This will setup a command hook that executes on every command and advanced tab completion for zsh and bash.
fasd_cache="$HOME/.fasd-init-bash"
if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
  fasd --init posix-alias bash-hook >| "$fasd_cache"
fi
source "$fasd_cache"
unset fasd_cache

## fzf - A command-line fuzzy finder written in Go - https://github.com/junegunn/fzf
# using fzf
if [ -f ~/.fzf.bash ]; then
    source ~/.fzf.bash && export FZF_TMUX=0
    export FZF_DEFAULT_COMMAND="find -L . -mindepth 1 \\( -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
               -o -type f -print \
               -o -type d -print \
               -o -type l -print 2> /dev/null | cut -b3-"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND="find -L . \\( -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
                              -o -type d -print 2> /dev/null | sed 1d | cut -b3-";
fi
# using ggvGc fzf_browser
[ -f ~/.fzf_browser/fzf_browser.sh ] && source ~/.fzf_browser/fzf_browser.sh && export PATH=${PATH}:~/.fzf_browser

# cd to :: case no parameter: latest dir in current dir, case one parameter: using 'fasd'
cdl() { 
    local file dirToCd;
    if [[ -z "$1" ]]; then
        #if there is no parameter, cd to latest dir in current dir
        local file latestDirInCurrentDir;
        for file in "${1:-.}"/*; do
            [[ -d "$file" ]] && [[ $file -nt "$latestDirInCurrentDir" ]] && latestDirInCurrentDir=$file;
        done; 
        dirToCd=$latestDirInCurrentDir;
    else
        # if there is a parameter, use 'fasd' to find that dir
        dirToCd=$(fasd -dt "$*")
    fi

    if [[ -e "$dirToCd" ]]; then
        cd "$dirToCd";
    else
        >&2 echo "Error: There is no directory to cd to";
    fi;
}
# /!\ Check to what end it is used (I don't remember it), might be removable
# # Variable d'environnement pointant vers le script de démarrage pour python
# # export PYTHONSTARTUP=~/.pythonstartup
